import logging, random
from aiogram import Bot, Dispatcher, executor, types
from aiogram.dispatcher.filters import Text
from parse_site import weather_sinoptic


API_TOKEN = 'BOT_TOKEN'

# Configure logging
logging.basicConfig(level=logging.INFO)

# Initialize bot and dispatcher
bot = Bot(token=API_TOKEN)
dp = Dispatcher(bot)

buttons = ["weather", "Game", 'game']

async def on_startup():
    user_should_be_chat = -702529372
    user_should_be_user = 545960544
    keyboard = types.ReplyKeyboardMarkup(resize_keyboard=True)
    keyboard.add(*buttons)
    await bot.send_message(user_should_be_user, "–ë–æ—Ç –∑–∞–ø—É—â–µ–Ω", reply_markup=keyboard)
    await bot.send_message(user_should_be_chat, "–ë–æ—Ç —É—Ä–∞!")


@dp.message_handler(commands=['start'])
async def send_welcome(message: types.Message):
    keyboard = types.ReplyKeyboardMarkup(resize_keyboard=True)
    keyboard.add(*buttons)
    await message.reply("Hi!\nI'm Bot!\nI'm type some statements\nYou type words: –º—ã—Å–ª—å, –∏–¥–µ—è, thought, idea, cat", reply_markup=keyboard)

text_all_time=('–ø–µ—Å', 'dog')
STATEMENTS= (
    '–ß–µ–ª–æ–≤–µ—á–µ—Å–∫–∏–π –º–æ–∑–≥ ‚Äì –≤–µ–ª–∏–∫–æ–ª–µ–ø–Ω–∞—è —à—Ç—É–∫–∞. –û–Ω —Ä–∞–±–æ—Ç–∞–µ—Ç –¥–æ —Ç–æ–π —Å–∞–º–æ–π –º–∏–Ω—É—Ç—ã, –∫–æ–≥–¥–∞ —Ç—ã –≤—Å—Ç–∞–µ—à—å, —á—Ç–æ–±—ã –ø—Ä–æ–∏–∑–Ω–µ—Å—Ç–∏ —Ä–µ—á—å.',
    '–û–Ω–∏ –ø—Ä–æ—á–ª–∏ –ª–µ–∫—Ü–∏—é –Ω–∞—Å—á–µ—Ç —Ç—Ä–µ–∑–≤–æ—Å—Ç–∏, –Ω–æ –≤—ã—Ä—É—á–∏–ª–∏ —Ç–∞–∫–∏–µ –≥—Ä–æ—à–∏, —á—Ç–æ –¥–∞–∂–µ –Ω–∞ –≤—ã–ø–∏–≤–∫—É –Ω–µ —Ö–≤–∞—Ç–∏–ª–æ.',
    '–ù–∏–∫–æ–≥–¥–∞ –Ω–µ —Å–ø–æ—Ä—å—Ç–µ —Å –∏–¥–∏–æ—Ç–∞–º–∏. –í—ã –æ–ø—É—Å—Ç–∏—Ç–µ—Å—å –¥–æ –∏—Ö —É—Ä–æ–≤–Ω—è, –≥–¥–µ –æ–Ω–∏ –≤–∞—Å –∑–∞–¥–∞–≤—è—Ç —Å–≤–æ–∏–º –æ–ø—ã—Ç–æ–º.',
    '–ï–¥–∏–Ω—Å—Ç–≤–µ–Ω–Ω—ã–π —Å–ø–æ—Å–æ–± —Å–æ—Ö—Ä–∞–Ω–∏—Ç—å –∑–¥–æ—Ä–æ–≤—å–µ ‚Äî —ç—Ç–æ –µ—Å—Ç—å —Ç–æ, —á–µ–≥–æ –Ω–µ —Ö–æ—á–µ—à—å, –ø–∏—Ç—å —Ç–æ, —á–µ–≥–æ –Ω–µ –ª—é–±–∏—à—å, –∏ –¥–µ–ª–∞—Ç—å —Ç–æ, —á—Ç–æ –Ω–µ –Ω—Ä–∞–≤–∏—Ç—Å—è.',
    '–†–∞–±–æ—Ç–∞–π—Ç–µ —Ç–∞–∫, —Å–ª–æ–≤–Ω–æ –¥–µ–Ω—å–≥–∏ –Ω–µ –∏–º–µ—é—Ç –¥–ª—è –í–∞—Å –Ω–∏–∫–∞–∫–æ–≥–æ –∑–Ω–∞—á–µ–Ω–∏—è.',
    '–Ø –∫–æ–≥–¥–∞-—Ç–æ —Ä–∞–±–æ—Ç–∞–ª –Ω–∞ –∑–æ–ª–æ—Ç—ã—Ö –ø—Ä–∏–∏—Å–∫–∞—Ö –∏ –∑–Ω–∞—é –≤—Å–µ –æ –¥–æ–±—ã—á–µ –∑–æ–ª–æ—Ç–∞, –∫—Ä–æ–º–µ –ª–∏—à—å –æ–¥–Ω–æ–≥–æ: –∫–∞–∫ –∑–∞—Ä–∞–±–æ—Ç–∞—Ç—å —Ç–∞–º –¥–µ–Ω—å–≥–∏.',
    '–õ–µ—Ç–æ ‚Äî —ç—Ç–æ –≤—Ä–µ–º—è –≥–æ–¥–∞, –∫–æ–≥–¥–∞ –æ—á–µ–Ω—å –∂–∞—Ä–∫–æ, —á—Ç–æ–±—ã –∑–∞–Ω–∏–º–∞—Ç—å—Å—è –≤–µ—â–∞–º–∏, –∫–æ—Ç–æ—Ä—ã–º–∏ –∑–∞–Ω–∏–º–∞—Ç—å—Å—è –∑–∏–º–æ–π –±—ã–ª–æ –æ—á–µ–Ω—å —Ö–æ–ª–æ–¥–Ω–æ.',
    '–ï—Å–ª–∏ –≤—ã –Ω–µ —á–∏—Ç–∞–µ—Ç–µ –≥–∞–∑–µ—Ç ‚Äî –≤—ã –Ω–µ–∏–Ω—Ñ–æ—Ä–º–∏—Ä–æ–≤–∞–Ω—ã. –ï—Å–ª–∏ –≤—ã —á–∏—Ç–∞–µ—Ç–µ –≥–∞–∑–µ—Ç—ã ‚Äî –≤—ã –¥–µ–∑–∏–Ω—Ñ–æ—Ä–º–∏—Ä–æ–≤–∞–Ω—ã.'
)

for i in text_all_time:
    @dp.message_handler(text_contains=i)
    async def text_contains_any_handler(message: types.Message):
        random_statments = random.randint(0, len(STATEMENTS)-1)
        await message.answer(STATEMENTS[random_statments])

list_data = ["game", "fox"]

def key_map():
    keyboard = types.InlineKeyboardMarkup()
    button = [
        types.InlineKeyboardButton(text="–ù–∞–∂–º–∏ –º–µ–Ω—è", callback_data="random_value"),
        types.InlineKeyboardButton(text="–∫–Ω–æ–ø–∫–∞2", callback_data="value"),
        types.InlineKeyboardButton(text="–∫–Ω–æ–ø–∫–∞2", callback_data="value"),
        types.InlineKeyboardButton(text="–∫–Ω–æ–ø–∫–∞2", callback_data="value"),
        types.InlineKeyboardButton(text="–∫–Ω–æ–ø–∫–∞2", callback_data="value"),
        types.InlineKeyboardButton(text="–∫–Ω–æ–ø–∫–∞2", callback_data="value"),
        types.InlineKeyboardButton(text="–∫–Ω–æ–ø–∫–∞2", callback_data="value"),
        types.InlineKeyboardButton(text="–∫–Ω–æ–ø–∫–∞2", callback_data="value"),
        types.InlineKeyboardButton(text="–∫–Ω–æ–ø–∫–∞2", callback_data="value"),
        types.InlineKeyboardButton(text="–∫–Ω–æ–ø–∫–∞2", callback_data="value"),
    ]
    keyboard = types.InlineKeyboardMarkup(row_width=2)
    keyboard.add(*button)
    return keyboard

for i in list_data:
    @dp.message_handler(regexp=f'({i}?)')
    async def cmd_random(message: types.Message):
        # keyboard = key_map()
        await message.answer("–ù–∞–∂–º–∏—Ç–µ –Ω–∞ –∫–Ω–æ–ø–∫—É, —á—Ç–æ–±—ã –±–æ—Ç –æ—Ç–ø—Ä–∞–≤–∏–ª —á–∏—Å–ª–æ –æ—Ç 1 –¥–æ 10", reply_markup=key_map())
       

@dp.callback_query_handler(text="random_value")
async def send_random_value(call: types.CallbackQuery):
    await call.message.answer(str(random.randint(1, 10)))
    # with open('data/cats.jpg', 'rb') as photo:
    #     await call.message.reply_photo(photo, caption='Cats are here üò∫')
    await call.answer()

@dp.callback_query_handler(text="value")
async def send_random_value(call: types.CallbackQuery):
    # await call.message.answer(str(random.randint(1, 10)))
    with open('data/cats.jpg', 'rb') as photo:
        await call.message.reply_photo(photo, caption='Cats are here üò∫')
    await call.answer()

@dp.message_handler(regexp='(^cat[s]?)')
async def cats(message: types.Message):
    with open('data/cats.jpg', 'rb') as photo:
        await message.reply_photo(photo, caption='Cats are here üò∫')

if __name__ == '__main__':
    executor.start(dp, on_startup())
    executor.start_polling(dp, skip_updates=True)